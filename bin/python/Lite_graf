
# coding: utf-8

# In[54]:

#Información que se va a incluir en las tablas de SQLite como ejemplo basándose en el esquema de Carolina.
#Perdón por la parte de answer que le di puro copiar y pegar pero con varias funciones no pude hacer lo que
#quería y buscaba no perder mucho tiempo en esto, ya que solo es de ejemplo.

import pandas as pd
import numpy as np
from random import randint

users = pd.DataFrame({
        "id": pd.Series(range(1,9)),
        "name": pd.Series(["Carlos","María","Jimena","Mateo","Lucas","Valentina","Sara","Nicolás"]),
        "email": pd.Series(["s", "w", "o", "i", "s", "29", "44","d"]),
        "password": pd.Series(["e", "t", "v", "g", "j", "x", "s","z"]),
        "team_id": pd.Series([1,1,1,1,2,2,2,2])
    })

options = pd.DataFrame({
        "id": pd.Series(range(1,246)),
        "body": pd.Series(np.repeat(["e", "t", "v", "g","y"], 49, axis=0)),
        "question_id": pd.Series(np.repeat((range(1,50)), 5, axis=0)),
        "value": pd.Series([1,2,3,4,5]*49)
    })

answers = pd.DataFrame({
        "user_id": pd.Series(np.repeat((range(1,9)), 49, axis=0)),
        "option_id": pd.Series([randint(1,5),randint(6,10),randint(11,15),
                                         randint(16,20),randint(21,25),randint(26,30),
                                         randint(31,35),randint(36,40),randint(41,45),
                                         randint(46,50),randint(51,55),randint(56,60),
                                         randint(61,65),randint(66,70),randint(71,75),
                                         randint(76,80),randint(81,85),randint(86,90),
                                         randint(91,95),randint(96,100),randint(101,105),
                                         randint(106,110),randint(111,115),randint(116,120),
                                         randint(121,125),randint(126,130),randint(131,135),
                                         randint(136,140),randint(141,145),randint(146,150),
                                         randint(151,155),randint(156,160),randint(161,165),
                                         randint(166,170),randint(171,175),randint(176,180),
                                         randint(181,185),randint(186,190),randint(191,195),
                                         randint(196,200),randint(201,205),randint(206,210),
                                         randint(211,215),randint(216,220),randint(221,225),
                                         randint(226,230),randint(231,235),randint(236,240),
                                         randint(241,245),randint(1,5),randint(6,10),randint(11,15),
                                         randint(16,20),randint(21,25),randint(26,30),
                                         randint(31,35),randint(36,40),randint(41,45),
                                         randint(46,50),randint(51,55),randint(56,60),
                                         randint(61,65),randint(66,70),randint(71,75),
                                         randint(76,80),randint(81,85),randint(86,90),
                                         randint(91,95),randint(96,100),randint(101,105),
                                         randint(106,110),randint(111,115),randint(116,120),
                                         randint(121,125),randint(126,130),randint(131,135),
                                         randint(136,140),randint(141,145),randint(146,150),
                                         randint(151,155),randint(156,160),randint(161,165),
                                         randint(166,170),randint(171,175),randint(176,180),
                                         randint(181,185),randint(186,190),randint(191,195),
                                         randint(196,200),randint(201,205),randint(206,210),
                                         randint(211,215),randint(216,220),randint(221,225),
                                         randint(226,230),randint(231,235),randint(236,240),
                                         randint(241,245),randint(1,5),randint(6,10),randint(11,15),
                                         randint(16,20),randint(21,25),randint(26,30),
                                         randint(31,35),randint(36,40),randint(41,45),
                                         randint(46,50),randint(51,55),randint(56,60),
                                         randint(61,65),randint(66,70),randint(71,75),
                                         randint(76,80),randint(81,85),randint(86,90),
                                         randint(91,95),randint(96,100),randint(101,105),
                                         randint(106,110),randint(111,115),randint(116,120),
                                         randint(121,125),randint(126,130),randint(131,135),
                                         randint(136,140),randint(141,145),randint(146,150),
                                         randint(151,155),randint(156,160),randint(161,165),
                                         randint(166,170),randint(171,175),randint(176,180),
                                         randint(181,185),randint(186,190),randint(191,195),
                                         randint(196,200),randint(201,205),randint(206,210),
                                         randint(211,215),randint(216,220),randint(221,225),
                                         randint(226,230),randint(231,235),randint(236,240),
                                         randint(241,245),randint(1,5),randint(6,10),randint(11,15),
                                         randint(16,20),randint(21,25),randint(26,30),
                                         randint(31,35),randint(36,40),randint(41,45),
                                         randint(46,50),randint(51,55),randint(56,60),
                                         randint(61,65),randint(66,70),randint(71,75),
                                         randint(76,80),randint(81,85),randint(86,90),
                                         randint(91,95),randint(96,100),randint(101,105),
                                         randint(106,110),randint(111,115),randint(116,120),
                                         randint(121,125),randint(126,130),randint(131,135),
                                         randint(136,140),randint(141,145),randint(146,150),
                                         randint(151,155),randint(156,160),randint(161,165),
                                         randint(166,170),randint(171,175),randint(176,180),
                                         randint(181,185),randint(186,190),randint(191,195),
                                         randint(196,200),randint(201,205),randint(206,210),
                                         randint(211,215),randint(216,220),randint(221,225),
                                         randint(226,230),randint(231,235),randint(236,240),
                                         randint(241,245),randint(1,5),randint(6,10),randint(11,15),
                                         randint(16,20),randint(21,25),randint(26,30),
                                         randint(31,35),randint(36,40),randint(41,45),
                                         randint(46,50),randint(51,55),randint(56,60),
                                         randint(61,65),randint(66,70),randint(71,75),
                                         randint(76,80),randint(81,85),randint(86,90),
                                         randint(91,95),randint(96,100),randint(101,105),
                                         randint(106,110),randint(111,115),randint(116,120),
                                         randint(121,125),randint(126,130),randint(131,135),
                                         randint(136,140),randint(141,145),randint(146,150),
                                         randint(151,155),randint(156,160),randint(161,165),
                                         randint(166,170),randint(171,175),randint(176,180),
                                         randint(181,185),randint(186,190),randint(191,195),
                                         randint(196,200),randint(201,205),randint(206,210),
                                         randint(211,215),randint(216,220),randint(221,225),
                                         randint(226,230),randint(231,235),randint(236,240),
                                         randint(241,245),randint(1,5),randint(6,10),randint(11,15),
                                         randint(16,20),randint(21,25),randint(26,30),
                                         randint(31,35),randint(36,40),randint(41,45),
                                         randint(46,50),randint(51,55),randint(56,60),
                                         randint(61,65),randint(66,70),randint(71,75),
                                         randint(76,80),randint(81,85),randint(86,90),
                                         randint(91,95),randint(96,100),randint(101,105),
                                         randint(106,110),randint(111,115),randint(116,120),
                                         randint(121,125),randint(126,130),randint(131,135),
                                         randint(136,140),randint(141,145),randint(146,150),
                                         randint(151,155),randint(156,160),randint(161,165),
                                         randint(166,170),randint(171,175),randint(176,180),
                                         randint(181,185),randint(186,190),randint(191,195),
                                         randint(196,200),randint(201,205),randint(206,210),
                                         randint(211,215),randint(216,220),randint(221,225),
                                         randint(226,230),randint(231,235),randint(236,240),
                                         randint(241,245,),randint(1,5),randint(6,10),randint(11,15),
                                         randint(16,20),randint(21,25),randint(26,30),
                                         randint(31,35),randint(36,40),randint(41,45),
                                         randint(46,50),randint(51,55),randint(56,60),
                                         randint(61,65),randint(66,70),randint(71,75),
                                         randint(76,80),randint(81,85),randint(86,90),
                                         randint(91,95),randint(96,100),randint(101,105),
                                         randint(106,110),randint(111,115),randint(116,120),
                                         randint(121,125),randint(126,130),randint(131,135),
                                         randint(136,140),randint(141,145),randint(146,150),
                                         randint(151,155),randint(156,160),randint(161,165),
                                         randint(166,170),randint(171,175),randint(176,180),
                                         randint(181,185),randint(186,190),randint(191,195),
                                         randint(196,200),randint(201,205),randint(206,210),
                                         randint(211,215),randint(216,220),randint(221,225),
                                         randint(226,230),randint(231,235),randint(236,240),
                                         randint(241,245,),randint(1,5),randint(6,10),randint(11,15),
                                         randint(16,20),randint(21,25),randint(26,30),
                                         randint(31,35),randint(36,40),randint(41,45),
                                         randint(46,50),randint(51,55),randint(56,60),
                                         randint(61,65),randint(66,70),randint(71,75),
                                         randint(76,80),randint(81,85),randint(86,90),
                                         randint(91,95),randint(96,100),randint(101,105),
                                         randint(106,110),randint(111,115),randint(116,120),
                                         randint(121,125),randint(126,130),randint(131,135),
                                         randint(136,140),randint(141,145),randint(146,150),
                                         randint(151,155),randint(156,160),randint(161,165),
                                         randint(166,170),randint(171,175),randint(176,180),
                                         randint(181,185),randint(186,190),randint(191,195),
                                         randint(196,200),randint(201,205),randint(206,210),
                                         randint(211,215),randint(216,220),randint(221,225),
                                         randint(226,230),randint(231,235),randint(236,240),
                                         randint(241,245,)])
        
    })

questions = pd.DataFrame({
        "id": pd.Series(np.repeat((range(1,50)), 1, axis=0)),
        "header": pd.Series(np.repeat(["e", "t", "v", "g","y","s","m"], 7, axis=0)),
        "kind": pd.Series(np.repeat(["e", "t", "v", "g","y","s","t"], 7, axis=0)),
        "section_id": pd.Series(np.repeat((range(1,8)), 7, axis=0))
    })

sections = pd.DataFrame({
        "id": pd.Series([1,2,3,4,5,6,7]),
        "title": pd.Series(["autoesquema", "apertura mental", "detallista", "estabilidad emocional",
                                     "extroversión","inteligencia","perfeccionismo bajo"]),
        "game_id": pd.Series([69, 53, 30, 20, 10, 29, 48])
    })

teams =pd.DataFrame({
        "id": pd.Series([1,2,3,4]),
        "leader_id": pd.Series([1,2,3,4]),
        "name": pd.Series(["Carlos","Lucas","Mónica","Sofía"]),
        "company": pd.Series(["Sura","Coomeva","Éxito","EPM"])
    })

#El esquema de entidades y atriibutos. Solo es un supuesto, pero igual no creo que haya que cambiar mucho código
#a pesar de eso

ourschema="""
DROP TABLE IF EXISTS "users";
DROP TABLE IF EXISTS "options";
DROP TABLE IF EXISTS "answers";
DROP TABLE IF EXISTS "questions";
DROP TABLE IF EXISTS "sections";
DROP TABLE IF EXISTS "teams";
CREATE TABLE "users" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "name" VARCHAR,
    "email" VARCHAR,
    "password" VARCHAR,
    "team_id" INTEGER,
    FOREIGN KEY(team_id) REFERENCES teams(id)
);
CREATE TABLE "options" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    "body" VARCHAR,
    "question_id" INTEGER,
    "value" INTEGER,
    FOREIGN KEY(question_id) REFERENCES questions(id)
);
CREATE TABLE "answers" (
    "user_id" INTEGER,
    "option_id" INTEGER,
    FOREIGN KEY(user_id) REFERENCES users(id),
    FOREIGN KEY(option_id) REFERENCES options(id)
);
CREATE TABLE "questions" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL,
    "header" VARCHAR,
    "kind" VARCHAR,
    "section_id" INTEGER,
    FOREIGN KEY(section_id) REFERENCES sections(id)
);
CREATE TABLE "sections" (
    "id" INTEGER NOT NULL,
    "title" VARCHAR,
    "game_id" INTEGER NOT NULL,
    PRIMARY KEY(id,game_id)
);
CREATE TABLE "teams" (
    "id" INTEGER NOT NULL,
    "leader_id" INTEGER NOT NULL,
    "name" VARCHAR,
    "company" VARCHAR,
    PRIMARY KEY(id,leader_id)
);
"""
#Se importan las librerías requeridas para correr todo el script y se definen unas funciones que 
#facilitarán el manejo de SQLite

import numpy as np
import scipy as sp
import matplotlib as mpl
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import itertools
import pandas as pd
import seaborn as sns
from sqlite3 import dbapi2 as sq3
import os
PATHSTART="."
def get_db(dbfile):
    sqlite_db = sq3.connect(os.path.join(PATHSTART, dbfile))
    return sqlite_db
def init_db(dbfile, schema):
    """Creates the database tables."""
    db = get_db(dbfile)
    db.cursor().executescript(schema)
    db.commit()
    return db

#Se crea la base de datos

db=init_db("pygraph.db", ourschema)

#En los próximos cuadros se convierte la información que se creó al comienzo
#a un formato CSV para luego leerlo de nuevo en Python y pasarlo a SQL. Se elimina
#la columna Unnamed que se produce como resultado al cargar el archivo CSV

users.to_csv("users.csv", sep='\t',encoding='utf-8')
dfcand = pd.read_csv("./users.csv", sep='\t')
dfcand = dfcand.drop('Unnamed: 0', 1)
dfcand.to_sql("users", db, if_exists="append", index=False)

options.to_csv("options.csv", sep='\t',encoding='utf-8')
dfcand = pd.read_csv("./options.csv", sep='\t')
dfcand = dfcand.drop('Unnamed: 0', 1)
dfcand.to_sql("options", db, if_exists="append", index=False)

answers.to_csv("answers.csv", sep='\t',encoding='utf-8')
dfcand = pd.read_csv("./answers.csv", sep='\t')
dfcand = dfcand.drop('Unnamed: 0', 1)
dfcand.to_sql("answers", db, if_exists="append", index=False)

questions.to_csv("questions.csv", sep='\t',encoding='utf-8')
dfcand = pd.read_csv("./questions.csv", sep='\t')
dfcand = dfcand.drop('Unnamed: 0', 1)
dfcand.to_sql("questions", db, if_exists="append", index=False)

sections.to_csv("sections.csv", sep='\t',encoding='utf-8')
dfcand = pd.read_csv("./sections.csv", sep='\t')
dfcand = dfcand.drop('Unnamed: 0', 1)
dfcand.to_sql("sections", db, if_exists="append", index=False)

teams.to_csv("teams.csv", sep='\t',encoding='utf-8')
dfcand = pd.read_csv("./teams.csv", sep='\t')
dfcand = dfcand.drop('Unnamed: 0', 1)
dfcand.to_sql("teams", db, if_exists="append", index=False)


# In[55]:

#Se importan las librerías requeridas para correr todo el script y se definen unas funciones que 
#facilitarán el manejo de SQLite. Se requiere instalar en el computador todas las librerías
#que no se encuentren instaladas. Se instalan en cmd con pip install "insertar_nombre_de_librería"
#Ej: pip install itertools

import numpy as np
import scipy as sp
import matplotlib as mpl
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import itertools
import pandas as pd
import seaborn as sns
from sqlite3 import dbapi2 as sq3
import os

#En PATHSTART se copia la ruta donde se encuentra guardada
#la base de datos; ej: C:\Winron\Flue

PATHSTART="."

#Se define la función get_db: Se establece la conexión con la base
#de datos de sqlite. Toma como argumento dbfile que es el nombre
#de la base de datos.

def get_db(dbfile):
    sqlite_db = sq3.connect(os.path.join(PATHSTART, dbfile))
    return sqlite_db

#Se crea el cursor y se "compromete" para poder usar la
#información de la base de datos en Python.

def init_db(dbfile):
    db.cursor()
    db.commit()
    return db

#Se inicia la base de datos. En sqlite_file
#introducir el nombre de la base de datos

sqlite_file="pygraph.db"
db = get_db(sqlite_file)
c = init_db(db)

#Función que ejecuta el enunciado de sqlite "sel" para
#dar como resultado una lista que contiene
#los datos pedidos por "sel".

def make_query(sel):
    c=db.cursor().execute(sel)
    return c.fetchall()

#n es el user_id del usuario actual que se extrae de session
n=2

#A partir del user_id del usuario actual, se determina el 
#equipo al que este pertenece (team_id) para extraer el 
#user_id y el name de cada integrante del equipo. 

russiandollsel="""
SELECT id,name FROM users WHERE 
    team_id = (SELECT team_id from users WHERE id='%s'); 
""" %n
out=make_query(russiandollsel)
num_users = [item[0] for item in out]
nombres=[item[1] for item in out]

#A partir de los user_id extraídos anteriormente y de los
#nombres de cada sección ("title" de la entidad "section"),
#se extraen los valores de las respuestas que dio cada usuario
#en cada atributo, los cuales se pasan a un "dataframe".
#Los titles asignados a cada section fueron (pueden cambiarse):
#"Autoestima", "Apertura mental", "Detallismo", "Estabilidad
#emocional", "Extroversión", "Perfección"

aut = []
for i in range((len(num_users))): 
    f=num_users[i]
    russiandollsel="""
    SELECT value FROM options WHERE
        id IN (SELECT option_id FROM answers WHERE
            option_id IN (SELECT id FROM options WHERE
                question_id IN (SELECT id FROM questions WHERE
                    section_id IN (SELECT id FROM sections WHERE title="autoesquema")))
        AND user_id = '%s')
    """ %f
    out=make_query(russiandollsel)
    ans=[item[0] for item in out]
    aut.append(ans)
autdf= pd.DataFrame(aut)

apm = []
for i in range((len(num_users))): 
    f=num_users[i]
    russiandollsel="""
    SELECT value FROM options WHERE
        id IN (SELECT option_id FROM answers WHERE
            option_id IN (SELECT id FROM options WHERE
                question_id IN (SELECT id FROM questions WHERE
                    section_id IN (SELECT id FROM sections WHERE title="apertura mental")))
        AND user_id = '%s')
    """ %f
    out=make_query(russiandollsel)
    ans=[item[0] for item in out]
    apm.append(ans)
apmdf= pd.DataFrame(apm)

det = []
for i in range((len(num_users))): 
    f=num_users[i]
    russiandollsel="""
    SELECT value FROM options WHERE
        id IN (SELECT option_id FROM answers WHERE
            option_id IN (SELECT id FROM options WHERE
                question_id IN (SELECT id FROM questions WHERE
                    section_id IN (SELECT id FROM sections WHERE title="detallista")))
        AND user_id = '%s')
    """ %f
    out=make_query(russiandollsel)
    ans=[item[0] for item in out]
    det.append(ans)
detdf= pd.DataFrame(det)

esm = []
for i in range((len(num_users))): 
    f=num_users[i]
    russiandollsel="""
    SELECT value FROM options WHERE
        id IN (SELECT option_id FROM answers WHERE
            option_id IN (SELECT id FROM options WHERE
                question_id IN (SELECT id FROM questions WHERE
                    section_id IN (SELECT id FROM sections WHERE title="estabilidad emocional")))
        AND user_id = '%s')
    """ %f
    out=make_query(russiandollsel)
    ans=[item[0] for item in out]
    esm.append(ans)
esmdf= pd.DataFrame(esm)

ext = []
for i in range((len(num_users))): 
    f=num_users[i]
    russiandollsel="""
    SELECT value FROM options WHERE
        id IN (SELECT option_id FROM answers WHERE
            option_id IN (SELECT id FROM options WHERE
                question_id IN (SELECT id FROM questions WHERE
                    section_id IN (SELECT id FROM sections WHERE title="extroversión")))
        AND user_id = '%s')
    """ %f
    out=make_query(russiandollsel)
    ans=[item[0] for item in out]
    ext.append(ans) 
extdf= pd.DataFrame(ext)

perf = []
for i in range((len(num_users))): 
    f=num_users[i]
    russiandollsel="""
    SELECT value FROM options WHERE
        id IN (SELECT option_id FROM answers WHERE
            option_id IN (SELECT id FROM options WHERE
                question_id IN (SELECT id FROM questions WHERE
                    section_id IN (SELECT id FROM sections WHERE title="perfeccionismo bajo")))
        AND user_id = '%s')
    """ %f
    out=make_query(russiandollsel)
    ans=[item[0] for item in out]
    perf.append(ans)
perfdf= pd.DataFrame(perf)

#Se suman los valores de las respuestas que dio cada
#usuario en cada sección. También pudo hacerse directamente
#en sqlite pero tener los valores anteriores creo que
#pueden tener un uso a futuro.

auts=autdf.sum(axis=1)
apms=apmdf.sum(axis=1)
esms=esmdf.sum(axis=1)
dets=detdf.sum(axis=1)
exts=extdf.sum(axis=1)
perfs=perfdf.sum(axis=1)

#Se crea el "dataframe" atdf que contiene los totales
#de cada sección para cada individuo (los valores van de 7-35)

atdf = pd.DataFrame(columns=("Autoestima", "Perfeccionismo Bajo","Orientación Al Detalle",
                    "Extroversión","Estabilidad Emocional","Apertura Mental"))
for i in range(len(num_users)):
   atdf.loc[i] = [auts[i],perfs[i],dets[i],exts[i],esms[i],apms[i]]

#Se llenan dos dataframes con la misma información que
#el anterior, para no eliminarlo en caso de que los
#valores totales se requieran más adelante. Estos dataframes
#serán modificados para contener otro tipo de información.
#rankdf contendrá el subgrupo o decatipo en el que se encuentra
#el individuo (explicado más adelante) y levdf contendrá
#la clasificación cualitativa del individuo para el atributo en cuestión. 

rankdf=atdf.copy()
levdf=atdf.copy()

#rankdf está compuesto por 10 decatipos o grupos del 1-10 que
#está conformado por 10 secciones del mismo tamaño
#desde 7 a 35 (que es el rango del valor total de 
#las respuestas por categoría). Es decir, que en
#el grupo 1 están quienes tienen valores totales
#de 7 a 9.8, en el 2 está quienes tienen un valor
#de 9.8 a 12.6, etc. En levdf se explica cualitativamente
#a que se refiere el decatipo:1-2 (muy bajo), 3-4 (bajo),
#5-6 (medio), 7-8 (alto), 9-10 (muy alto).

for j, k in itertools.product(range(len(num_users)), range(len(atdf.columns))):
    if atdf.iloc[j,k]>=7 and atdf.iloc[j,k]<9.8:
        rankdf.iloc[j,k]=1
        levdf.iloc[j,k]="Muy bajo"
    elif atdf.iloc[j,k]>=9.8 and atdf.iloc[j,k]<12.6:
        rankdf.iloc[j,k]=2
        levdf.iloc[j,k]="Muy bajo"
    elif atdf.iloc[j,k]>=12.6 and atdf.iloc[j,k]<15.4:
        rankdf.iloc[j,k]=3
        levdf.iloc[j,k]="Bajo"
    elif atdf.iloc[j,k]>=15.4 and atdf.iloc[j,k]<18.2:
        rankdf.iloc[j,k]=4
        levdf.iloc[j,k]="Bajo"
    elif atdf.iloc[j,k]>=18.2 and atdf.iloc[j,k]<21:
        rankdf.iloc[j,k]=5
        levdf.iloc[j,k]="Medio"
    elif atdf.iloc[j,k]>=21 and atdf.iloc[j,k]<23.8:
        rankdf.iloc[j,k]=6
        levdf.iloc[j,k]="Medio"
    elif atdf.iloc[j,k]>=23.8 and atdf.iloc[j,k]<26.6:
        rankdf.iloc[j,k]=7
        levdf.iloc[j,k]="Alto"
    elif atdf.iloc[j,k]>=26.6 and atdf.iloc[j,k]<29.4:
        rankdf.iloc[j,k]=8
        levdf.iloc[j,k]="Alto"
    elif atdf.iloc[j,k]>=29.4 and atdf.iloc[j,k]<32.2:
        rankdf.iloc[j,k]=9
        levdf.iloc[j,k]="Muy alto"
    elif atdf.iloc[j,k]>=32.2 and atdf.iloc[j,k]<=35:
        rankdf.iloc[j,k]=10
        levdf.iloc[j,k]="Muy alto"
    else:
        rankdf.iloc[j,k]=None
        
#Se crea un nuevo "dataframe" que será llenado posteriormente con la información
#del grado de ajuste. 

grjust=atdf.copy()

#Se usan las operaciones determindas por el experto para calcular
#el grado de ajuste. En la variable "a" se calcula el promedio
#de todos los integrantes del equipo en determinada sección/atributo
#y se le resta su desviación estándar. En la variable "b" se calcula
#nuevamente el promedio de todos los integrantes del equipo
#en determinada sección/atributo pero en este caso se suma
#la desviación estándar. Ej: Si la media es 5 y la desviación 
#estándar es 2, a será igual a 3 y b será igual a 7.
#En c y d se suma o resta 1.5 ya que dice que en las
#ciencias sociales ese es el valor usado en estos casos.
#Si el valor del total del atributo (x)  se encuentra entre
#a y b, el grado de ajuste será de 1; si se encuentra entre
#c y a, el grado de ajuste será igual a (x-c)/(a-c); y si el
#total del atributo está entre b y d, entonces el grado de
#ajuste será igual a (d-x)/(d-b).Luego de realizadas las
#operaciones se multiplican por 100 para obtener el porcentaje
#y se calcula el promedio total por atributo el cual queda guardado
#en un array en caso de ser necesitado para otra visualización.

for k in range(len(rankdf.columns)):
    a=rankdf.iloc[:,k].mean()-rankdf.iloc[:,k].std()
    b=rankdf.iloc[:,k].mean()+rankdf.iloc[:,k].std()
    c=a-1.5
    d=b+1.5
    x=rankdf.iloc[i,k]
    for i in range(len(num_users)):
        if rankdf.iloc[i,k]>=c and rankdf.iloc[i,k]<a:
            grjust.iloc[i,k]=(rankdf.iloc[i,k]-c)/(a-c)
        elif rankdf.iloc[i,k]>=a and rankdf.iloc[i,k]<=b:
            grjust.iloc[i,k]=1
        elif rankdf.iloc[i,k]>b and rankdf.iloc[i,k]<=d:
            grjust.iloc[i,k]=(d-rankdf.iloc[i,k])/(d-b)
grjust=grjust*100
grjust_mean=grjust.mean()

#Se calculan valores similares a los mencionados arriba,
#pero en este caso a,b,c y d se calculan a partir
#de los promedios de los atributos de todo el equipo.
#Luego se realizan las mismas operaciones que las anteriores,
#pero en este caso x es igual al promedio de todos los
#atributos en un individuo. El resultado obtenido es el
#grado de ajuste general de un individuo con su equipo.

rankmn=rankdf.mean()
usermn=rankdf.mean(axis=1)
a=rankmn[:].mean()-rankmn[:].std()
b=rankmn[:].mean()+rankmn[:].std()
c=a-1.5
d=b+1.5

for i in range(len(num_users)):
    if usermn[i]>=c and usermn[i]<a:
        grjust.loc[i,"Valor General"]=(usermn[i]-c)/(a-c)
    elif usermn[i]>=a and usermn[i]<b:
        grjust.loc[i,"Valor General"]=1
    elif usermn[i]>=b and usermn[i]<=d:
        grjust.loc[i,"Valor General"]=(d-usermn[i])/(d-b)
grjust.loc[:,"Valor General"]=grjust.loc[:,"Valor General"]*100

#Se determina el nivel de ajuste de cada individuo con sus
#compañeros. De 0-50 es bajo, de 50-85 aceptable y de 85-100
#ideal.

levgrjust=grjust.copy()

for j, k in itertools.product(range(len(num_users)), range(len(grjust.columns))):
    if grjust.iloc[j,k]>=0 and grjust.iloc[j,k]<50:
        levgrjust.iloc[j,k]="bajo"
    elif grjust.iloc[j,k]>=50 and grjust.iloc[j,k]<85:
        levgrjust.iloc[j,k]="aceptable"
    elif grjust.iloc[j,k]>=85 and grjust.iloc[j,k]<=100:
        levgrjust.iloc[j,k]="ideal"
    else:
        levgrjust.iloc[j,k]=None
        
#Se ordenan las columnas para que que la tabla a visualizar
#sea más fácil de entender. En caso de que se quiera visualizar
#en otra ocasión

grjust=round(grjust,1)
grjust["Nombre"]=nombres
cols=["Nombre", "Autoestima", "Perfeccionismo Bajo",
      "Orientación Al Detalle","Extroversión",
      "Estabilidad Emocional","Apertura Mental","Valor General"]
grjust=grjust[cols]

#Es el script necesario para realizar la gráfica de polígonos que se encuentra más adelante

def _scale_data(data, ranges):
    """scales data[1:] to ranges[0],
    """
    for d, (y1, y2) in zip(data[1:], ranges[1:]):
        assert (y1 <= d <= y2) or (y2 <= d <= y1)
    x1, x2 = ranges[0]
    d = data[0]
    sdata = [d]
    for d, (y1, y2) in zip(data[1:], ranges[1:]):
        sdata.append((d-y1) / (y2-y1) 
                     * (x2 - x1) + x1)
    return sdata

class ComplexRadar():
    def __init__(self, fig, variables, ranges,
                 n_ordinate_levels=10):
        angles = np.arange(0, 360, 360./len(variables))

        axes = [fig.add_axes([0.1,0.1,0.9,0.9],polar=True,
                label = "axes{}".format(i)) 
                for i in range(len(variables))]
        l, text = axes[0].set_thetagrids(angles, 
                                         labels=variables)
        [txt.set_rotation(angle-90) for txt, angle 
             in zip(text, angles)]
        for ax in axes[1:]:
            ax.patch.set_visible(False)
            ax.grid("off")
            ax.xaxis.set_visible(False)
        for i, ax in enumerate(axes):
            grid = np.linspace(*ranges[i], 
                               num=n_ordinate_levels)
            gridlabel = ["{}".format(round(x,2)) 
                         for x in grid]
            if ranges[i][0] > ranges[i][1]:
                grid = grid[::-1] 
            gridlabel[0] = "" 
            ax.set_rgrids(grid, labels=gridlabel,
                         angle=angles[i])
            #ax.spines["polar"].set_visible(False)
            ax.set_ylim(*ranges[i])
        self.angle = np.deg2rad(np.r_[angles, angles[0]])
        self.ranges = ranges
        self.ax = axes[0]

    def plot(self, data, *args, **kw):
        sdata = _scale_data(data, self.ranges)
        l = self.ax.plot(self.angle, np.r_[sdata, sdata[0]], *args, **kw)
        return l

    def fill(self, data, *args, **kw):
        sdata = _scale_data(data, self.ranges)
        self.ax.fill(self.angle, np.r_[sdata, sdata[0]], *args, **kw)
        
#Se determina si el usuario ha respondido todas las secciones
#de preguntas o no. Si no lo ha hecho aparece una serie de
#mensajes pidiéndole que conteste primero todas las preguntas antes
#de ver sus resultados. Si ya contestó todo, aparece la gráfica.
#Se obtienen los nombres de las columnas en variables, se establece
#el rango de los ejes (de 1-10 que es el rango de valores de rankdf),
#se crea la gráfica para el usuario que está usando la aplicación
#y se compara con los valores de sus compañeros de equipo.

i = num_users.index(n)
name=nombres[i]

if rankdf.iloc[i,:].isnull().values.any():
    print("En este momento es imposible mostrar sus resultados.")
    print("Es necesario que termine de responder todas las preguntas.")
    print("Por favor vuelva cuando haya finalizado.")
    print("Gracias.")

else:

    rankmn=rankdf.loc[rankdf.index != i].mean()
    names=["Resto del equipo",nombres[i]]
    variables = [k[0] for k in rankdf.iteritems()]

    ranges = [(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10)] 
    fig1 = plt.figure(figsize=(7, 7))
    radar = ComplexRadar(fig1, variables, ranges)
    lax = []

    data=rankmn.values
    l, = radar.plot(data, label=name,color="Blue")
    lax.append(l)
    #Indica la transparencia de las figuras
    radar.fill(data,alpha=0.2)

    data=rankdf.iloc[i].values
    l, = radar.plot(data, label=name,color="Green")
    lax.append(l)
    #Indica la transparencia de las figuras
    radar.fill(data,alpha=0.2)

    #Se crea la leyenda para la gráfica y se determina el título
        
    legendax = fig1.add_axes([0.8,0.8,0.1,.2])
    legendax.legend(handles = lax, labels=names, loc=3, bbox_to_anchor=(0,0,1,1), bbox_transform=fig1.transFigure )
    legendax.axis('off')
    ttl = sns.plt.title("¿Qué tanto se parece %s al resto de su equipo?"% nombres[i],fontsize=25) 
    ttl.set_position([-2.5, 1.2]) 
    sns.plt.show()
    
    #Se crea un mensaje que le dice al usuario cuál es el grado de ajuste que obtuvo con
    #el equipo y si este es bueno o no.
        
    print ("El grado de ajuste de %s con sus compañeros es del %s%%." % (nombres[i], grjust.loc[i,"Valor General"]))
    print("Es decir que su encaje con el equipo es %s." % levgrjust.loc[i,"Valor General"])

